package org.example.lessons.lesson12.homeworks

fun main() {
//Задачи на приведение коллекции к значению
    val col1: List<Int> = listOf(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,1)
    val col2: List<String> = listOf("1", "11", "123", "string", "stringus", "", "1234567890")
//Проверить, что размер коллекции больше 5 элементов.
    println("Размер коллекции больше 5: ${col1.size>5}")
//Проверить, что коллекция пустая
    println("Коллекция пустая: ${col1.isEmpty()}")
//Проверить, что коллекция не пустая
    println("Коллекция пустая: ${col1.isNotEmpty()}")
//Взять элемент по индексу или создать значение если индекса не существует
    println("10-й элемент коллекции: ${col1.getOrElse(10, { 10 })}")
//Собрать коллекцию в строку
    println("Коллекцию в строку: ${col1.toString()}")
//Посчитать сумму всех значений
    println("Сумма всех значений: ${col1.sum()}")
//Посчитать среднее
    println("Среднее всех значений: ${col1.average()}")
//Взять максимальное число
    println("Максимальное значение: ${col1.max()}")
//Взять минимальное число
    println("Минимальное значение: ${col1.min()}")
//Взять первое число или null
    println("Взять первое число или null: ${col1.firstOrNull()}")
//Проверить что коллекция содержит элемент
    println("Коллекция содержит элемент 7: ${col1.contains(7)}")

//Задачи на обработку коллекций
//Отфильтровать коллекцию по диапазону 18-30
    println("Отфильтровать коллекцию по диапазону 18-30: ${col1.filter {it in 18..30}}")
//Выбрать числа, которые не делятся на 2 и 3 одновременно
    println("Числа, которые не делятся на 2 и 3 одновременно: ${col1.filter {it%2 + it%3 > 0}}")
//Очистить текстовую коллекцию от null элементов
    println("Коллекция без null: ${col1.filterNotNull()}}")
//Преобразовать текстовую коллекцию в коллекцию длин слов
    println("Преобразование текстовой коллекции в коллекцию длин слов: ${col2.map { it.length }}}")
//Преобразовать текстовую коллекцию в мапу, где ключи - перевёрнутые слова, а значения - длина слов
    println("Преобразование текстовой коллекции в мапу, где ключи - перевёрнутые слова, а значения - длина слов: ${col2.associate { it.reversed() to it.length }}}")
//Отсортировать список в алфавитном порядке
    println("Список, отсортированный в алфавитном порядке: ${col2.sorted()}}")
//Взять первые 3 элемента списка
    println("Первые 3 элемента списка: ${col1[0]}, ${col1[1]}, ${col1[2]}")
//Распечатать квадраты элементов списка
    println("Квадраты элементов списка: ${col1.forEach { it * it }}")
//Группировать список по первой букве слов
    println("Группировка списка по первой букве слов: ${col2.groupBy {if (it.length>0) it[0] else "NULL"} }")
//Очистить список от дублей
    println("Список, очищенный от дублей: ${col1.distinct()}")
//Отсортировать список по убыванию
    println("Список, отсортированный по убыванию: ${col1.sortedDescending()}")
//Взять последние 3 элемента списка
    println("3 последние элемента списка: ${col1.takeLast(3)}")

//Реши задачи ниже в отдельных функциях.

//Задача 24. Характеристика числовой коллекции
//Напиши функцию, которая принимает коллекцию чисел и возвращает строку с характеристикой коллекции используя конструкцию when
    fun func1(nums:List<Int>) {
        when {
            nums.isEmpty() -> println("Пусто")
            nums.size < 5 -> println("Короткая")
            nums[0]==0 -> println("Стартовая")
            nums.sum()>10000 -> println("Массивная")
            nums.average()==10.0 -> println("Сбалансированная")
            nums.joinToString("").length==20 -> println("Клейкая")
            nums.max()<-10 -> println("Отрицательная")
            nums.min()>1000 -> println("Положительная")
            nums.containsAll(listOf(3,14)) -> println("Пи***тая")
            else -> println("Уникальная")
        }
    }
    func1(col1)
//Вызвать метод с данными, подходящими под каждую из веток

//Задача 25. Анализ учебных оценок
//Напиши функцию, которая принимает список чисел и возвращает список чисел.
// Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.
    val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
    fun func2(grades:List<Int>) {
        println("Анализ оценок: ${grades.filter { it >= 60 }.sorted().take(3)}")
    }
//Задача 26. Создание каталога по первой букве
//Напиши функцию, которая принимает список строк и возвращает словарь с ключом - буквой и значением - строкой.

    val liststr = listOf("Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка")
    fun func3() {
        println("Каталог по первой букве: ${liststr.map { it.decapitalize() }.groupBy { it[0] }}")
    }
//Задание 27. Подсчёт средней длины слов в списке
//Напиши функцию, которая принимает список строк и возвращает строку.
//Цель: Перевести все слова в количество букв, подсчитать среднее значение.
//Вернуть форматированный текст с двумя знаками после запятой, используя функцию format и подходящий шаблон.
    fun func4(strings:List<String>):String {
        return "Средняя длина слов в списке: ${"%.2f".format(strings.map { it.length }.average())}"
    }
    println(func4(liststr))
//Задание 28: Категоризация чисел
//Напиши функцию, которая принимает список чисел и возвращает словарь с ключами - строками и значениями - числами.
//Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
    val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
    fun func5(nums:List<Int>): Map<String,List<Int>> {
        return nums.distinct().sortedDescending().groupBy {if (it%2==0) "четные" else "нечетные"}
    }
    println(func5(numbers))
//Задание 29: Поиск первого подходящего элемента
//Напиши функцию, которая принимает список чисел и число и возвращает nullable число.
//Цель: Найти первый возраст в списке, который соответствует условию (больше второго аргумента) и вернуть его, либо null если значения не нашлось.
    val ages = listOf(22, 18, 30, 45, 17, null, 60)
    fun func6(ages:List<Int?>, age:Int): Int? {
        return ages.filterNotNull().firstOrNull { it>age }
    }
    println(func6(ages,18))
}